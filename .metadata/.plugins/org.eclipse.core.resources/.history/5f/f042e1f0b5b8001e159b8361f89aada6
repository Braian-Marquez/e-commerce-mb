package com.ecommerce.mb.commerce.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import com.ecommerce.mb.commerce.mapper.GenericMapper;
import com.ecommerce.mb.commerce.models.repository.CategoryRepository;
import com.ecommerce.mb.commerce.models.repository.CommerceRepository;
import com.ecommerce.mb.commerce.models.repository.ImageRepository;
import com.ecommerce.mb.commerce.models.repository.ProductRepository;
import com.ecommerce.mb.commerce.models.request.ProductRequest;
import com.ecommerce.mb.commerce.service.interfaces.ProductService;
import com.ecommerce.mb.commerce.utils.FirebaseCredenciales;
import com.ecommerce.mb.commons.exceptions.InvalidCredentialsException;
import com.ecommerce.mb.commons.exceptions.NotFoundException;
import com.ecommerce.mb.commons.models.entity.Category;
import com.ecommerce.mb.commons.models.entity.Commerce;
import com.ecommerce.mb.commons.models.entity.ImageEntity;
import com.ecommerce.mb.commons.models.entity.Product;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;



@Service
public class ProductServiceImpl implements ProductService{
	@Autowired
    private ProductRepository productRepository;
	@Autowired
    private CommerceRepository commerceRepository;
	@Autowired
    private CategoryRepository categoryRepository;
	@Autowired
    private ImageRepository imageRepository;
	@Autowired
    private FirebaseCredenciales firebaseCredentials;
	@Autowired
	private GenericMapper mapper;
    @Value("${firebase.FIREBASE_NAME}")
	private String FIREBASE_BUCKET_NAME;
	

    @Override
    public Object updateProduct(String profileId, Long productId, ProductRequest productRequest, List<MultipartFile> images) throws FileNotFoundException, IOException, NumberFormatException, InvalidCredentialsException {
        Commerce commerce = commerceRepository.findById(Long.valueOf(profileId))
                .orElseThrow(() -> new InvalidCredentialsException("The commerce does not exist."));

        Product existingProduct = productRepository.findById(productId)
                .orElseThrow(() -> new NotFoundException("The product does not exist."));

        if (!existingProduct.getCommerceId().equals(commerce.getId())) {
            throw new NotFoundException("Invalid request.");
        }

        Category category = categoryRepository.findById(productRequest.getCategoryId())
                .orElseThrow(() -> new NotFoundException("The category does not exist."));
        
        List<ImageEntity> existingImages = existingProduct.getImage();
        if (existingImages != null && !existingImages.isEmpty()) {
            for (ImageEntity existingImage : existingImages) {
            	imageRepository.delete(existingImage);
            }
        }
        List<ImageEntity> imageEntities = new ArrayList<>();
        if (images != null && !images.isEmpty()) {
            for (MultipartFile image : images) {
                ImageEntity imageEntity = new ImageEntity();
                imageEntity.setName("profileImage");
                imageEntity.setType(image.getContentType());
                imageEntity.setUrl(uploadDocument(image));
                imageRepository.save(imageEntity);
                imageEntities.add(imageEntity);
            }
        }

        existingProduct.setName(productRequest.getName());
        existingProduct.setDescription(productRequest.getDescription());
        existingProduct.setPrice(productRequest.getPrice());
        existingProduct.setCategory(category);

        if (!imageEntities.isEmpty()) {
            existingProduct.setImage(imageEntities);
        }
        
        productRepository.save(existingProduct);

        return existingProduct;
    }


	@Override
	public boolean deleteProduct(String profileId, Long productId) throws NumberFormatException, InvalidCredentialsException {
		Commerce commerce=commerceRepository.findById(Long.valueOf(profileId)).orElseThrow(()->new InvalidCredentialsException("The commerce not exist."));
		Product product=productRepository.findById(productId).orElseThrow(()->new NotFoundException("The product not exist."));
		if(!product.getCommerceId().equals(commerce.getId())) {
			throw new NotFoundException("The request invalid.");
		}
		productRepository.delete(product);
		return true;
	}

	@Override
	public Object addProduct(ProductRequest request, String profileId, List<MultipartFile> images) throws NumberFormatException, InvalidCredentialsException, FileNotFoundException, IOException {
		
		Commerce commerce=commerceRepository.findById(Long.valueOf(profileId)).orElseThrow(()->new InvalidCredentialsException("The commerce not exist."));
		Category category=categoryRepository.findById(request.getCategoryId()).orElseThrow(()->new NotFoundException("The category not exist."));
	    if (images == null || images.isEmpty()) {
	        throw new IllegalArgumentException("Image list cannot be empty.");
	    }

	    List<ImageEntity> imageEntities = new ArrayList<>();
	    for (MultipartFile image : images) {
	        ImageEntity imageEntity = new ImageEntity();
	        imageEntity.setName("profileImage");
	        imageEntity.setType(image.getContentType());
	        imageEntity.setUrl(uploadDocument(image));
	        imageRepository.save(imageEntity);
	        imageEntities.add(imageEntity);
	    }

		Product product =mapper.map(request, Product.class);
		product.setImage(imageEntities);;
		product.setCategory(category);
		product.setCommerceId(commerce.getId());
		productRepository.save(product);
		
		return product;
	}
	private String uploadDocument(MultipartFile document)
			throws IOException, FileNotFoundException, java.io.IOException {
		String fileName = UUID.randomUUID().toString() + "_" + document.getOriginalFilename();
		ByteArrayInputStream inputStream = new ByteArrayInputStream(firebaseCredentials.getCredenciales().toString().getBytes(StandardCharsets.UTF_8));
		GoogleCredentials credentials = GoogleCredentials.fromStream(inputStream);
		Storage storage = StorageOptions.newBuilder().setCredentials(credentials).build().getService();
		BlobId blobId = BlobId.of(FIREBASE_BUCKET_NAME, "profileImages/" + fileName);
		BlobInfo blobInfo = BlobInfo.newBuilder(blobId).setContentType(document.getContentType())
				.setContentDisposition("inline").build();
		Blob blob = storage.create(blobInfo, document.getBytes(),
				Storage.BlobTargetOption.predefinedAcl(Storage.PredefinedAcl.PUBLIC_READ));
		String publicUrl = blob.getMediaLink();
		return publicUrl;
	}
}

package com.ecommerce.mb.auth.controller;

import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.mb.auth.models.entity.UserEntity;
import com.ecommerce.mb.auth.models.repository.CustomerRepository;
import com.ecommerce.mb.auth.models.repository.UserRepository;
import com.ecommerce.mb.auth.models.request.AuthenticationRequest;
import com.ecommerce.mb.auth.models.request.CommerceRequest;
import com.ecommerce.mb.auth.models.request.CustomerRequest;
import com.ecommerce.mb.auth.models.response.AuthenticationResponse;
import com.ecommerce.mb.auth.security.JwtService;
import com.ecommerce.mb.auth.service.UserDetailsCustomService;
import com.ecommerce.mb.auth.utils.Messenger;
import com.ecommerce.mb.commons.exceptions.BadCredentialsException;
import com.ecommerce.mb.commons.exceptions.InvalidCredentialsException;
import com.ecommerce.mb.commons.models.entity.Customer;
import com.ecommerce.mb.commons.models.enums.CodeEnum;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@Validated
@RestController
@RequestMapping("/public/v1")
@Tag(name = "Autenticacion", description = "Endpoints para autenticar usuarios y registrar Invitados.")
public class UserAuthController {
	@Autowired
	private UserDetailsCustomService service;
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private JwtService jwtService;

	@Autowired
	private CustomerRepository perfilRepository;

	@Autowired
	private Messenger messenger;


	@PostMapping(value = "/login", produces = MediaType.APPLICATION_JSON_VALUE)
	@Operation(summary = "Login", description = "Permite a un Usuario logearse ingresando email y password.")
	public ResponseEntity<?> login(@RequestBody  AuthenticationRequest authenticationRequest)
			throws InvalidCredentialsException {

		UserEntity userEntity = service.login(authenticationRequest);
		if (userEntity != null) {
			String jwtToken = jwtService.generateToken(userEntity);
			Customer perfil = perfilRepository.getByUserId(userEntity.getId()).orElse(new Customer());
			AuthenticationResponse auth = new AuthenticationResponse();
			auth.setToken(jwtToken);
			auth.setIdCustomer(perfil.getId());
			auth.setIdUser(userEntity.getId());
			auth.setName(perfil.getFirstName());
			userRepository.save(userEntity);
			return ResponseEntity.status(HttpStatus.ACCEPTED).body(auth);
		} else {
			throw new BadCredentialsException(messenger.getMessage(CodeEnum.BAD_CREDENTIALS));
		}

	}

	@PostMapping("/register-customer")
	@Operation(summary = "Registro", description = "Permite a un Usuario registrarse.")
	public ResponseEntity<?> registerCustomer( @RequestBody CustomerRequest user) throws IOException {
		return service.saveCustomer(user);
	}
	
	@PostMapping("/register-commerce")
	@Operation(summary = "Registro", description = "Permite a un Usuario registrarse.")
	public ResponseEntity<?> registerCommerce( @RequestBody CommerceRequest user) throws IOException {
		return service.saveCommerce(user);
	}

}

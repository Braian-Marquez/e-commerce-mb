package com.ecommerce.mb.customer.controller;

import java.io.FileNotFoundException;
import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.MediaType;
import com.ecommerce.mb.commerce.models.request.EmailRequest;
import com.ecommerce.mb.commerce.models.request.ProfileRequest;
import com.ecommerce.mb.commerce.service.interfaces.ProfileService;
import com.ecommerce.mb.commons.exceptions.InvalidCredentialsException;
import com.ecommerce.mb.commons.models.entity.Adress;

import jakarta.validation.constraints.NotBlank;

@Validated
@RestController
@RequestMapping("/user/v1")
public class ProfileController {
    @Autowired
	private ProfileService service;
    
    @PutMapping(value = "update-image-profile", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getImageProfile(@RequestHeader("commerce-id") String commerceId,
		@RequestPart MultipartFile imagen) throws FileNotFoundException, IOException, NumberFormatException, InvalidCredentialsException {
		return service.updateImageProfile(imagen,commerceId);
	}
    
    @PutMapping(value = "update-adress", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> updateAdress(@RequestHeader("commerce-id") String commerceId,
		@RequestBody Adress adress) throws FileNotFoundException, IOException, NumberFormatException, InvalidCredentialsException {
		return service.updateAdress(adress,commerceId);
	}
    
    @PutMapping(value = "update-profile", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> updateProfile(@RequestHeader("commerce-id") String commerceId,
		@RequestBody ProfileRequest request) throws FileNotFoundException, IOException, NumberFormatException, InvalidCredentialsException {
		return service.updateProfile(request,commerceId);
	}

	@GetMapping(value = "get-profile", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getProfile(@RequestHeader("commerce-id") String commerceId) throws NumberFormatException, InvalidCredentialsException {
		return ResponseEntity.ok(service.getProfile(commerceId));
	}

	@PutMapping(value = "update-email", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> updateEmail(@RequestHeader("commerce-id") String commerceId,
		@RequestBody EmailRequest request) throws NumberFormatException, InvalidCredentialsException {
		return service.updateEmail(request,commerceId);
	}

	@PutMapping(value = "validate-email", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> validateEmail(@RequestHeader("commerce-id") String commerceId,
			@RequestParam("code-email") @NotBlank String codeEmail, 
			@RequestParam("new-email")@NotBlank String newEmail)
		throws IOException, NumberFormatException, InvalidCredentialsException {
		return service.validateEmail(codeEmail, newEmail,commerceId);
	}
	
}

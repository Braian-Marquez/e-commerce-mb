package com.ecommerce.mb.commerce.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import com.ecommerce.mb.commerce.models.request.ProductRequest;
import com.ecommerce.mb.commerce.service.interfaces.ProductService;

@Validated
@RestController
@RequestMapping("/commerce/v1")
public class ProductsController {
	    @Autowired
	    private ProductService productService;

	   
	    @PostMapping("add-product")
	    public ResponseEntity<?> addProduct(@RequestHeader("profile-id") String profileId,
	    		@RequestBody ProductRequest product,
	    		@RequestPart MultipartFile image) {
	        return ResponseEntity.ok(productService.addProduct(product));
	    }

	    @GetMapping
	    public ResponseEntity<List<Product>> getAllProducts() {
	        List<Product> products = productService.getAllProducts();
	        return ResponseEntity.ok(products);
	    }

	    @GetMapping("/{productId}")
	    public ResponseEntity<Product> getProductById(@PathVariable Long productId) {
	        Product product = productService.getProductById(productId);
	        if (product != null) {
	            return ResponseEntity.ok(product);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }

	    // UPDATE - Actualizar un producto existente
	    @PutMapping("/{productId}")
	    public ResponseEntity<Product> updateProduct(@PathVariable Long productId, @RequestBody Product updatedProduct) {
	        Product product = productService.updateProduct(productId, updatedProduct);
	        if (product != null) {
	            return ResponseEntity.ok(product);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }

	    // DELETE - Eliminar un producto por ID
	    @DeleteMapping("/{productId}")
	    public ResponseEntity<Void> deleteProduct(@PathVariable Long productId) {
	        boolean deleted = productService.deleteProduct(productId);
	        if (deleted) {
	            return ResponseEntity.noContent().build();
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }
}
